{"version":3,"sources":["components/Statistics/Statistics.js","components/FeedbackOptions/FeedbackOptions.js","components/Notification/Notification.js","components/Section/Section.js","App.js","index.js"],"names":["Statistics","good","neutral","bad","total","positivePercent","className","FeedbackOptions","options","onLeaveFeedback","map","option","type","onClick","Notification","message","Section","title","children","App","state","handleIncrement","key","setState","prevState","countTotalFeedback","Object","values","reduce","item","countPositiveFeedbackPercentage","parseInt","isVisible","this","keys","React","Component","ReactDOM","render","StrictMode","document","querySelector"],"mappings":"+UAyCeA,EApCI,SAAC,GAAoD,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,gBAC/C,OACE,qBAAIC,UAAU,aAAd,UACE,qBAAIA,UAAU,kBAAd,iBAEE,+BAAOL,OAGT,qBAAIK,UAAU,kBAAd,oBAEE,+BAAOJ,OAET,qBAAII,UAAU,kBAAd,gBAEE,+BAAOH,OAET,qBAAIG,UAAU,kBAAd,kBAEE,+BAAOF,OAET,qBAAIE,UAAU,kBAAd,8BAEE,iCAAOD,EAAP,cCCOE,G,MAvBS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OACE,oBAAIH,UAAU,kBAAd,SACGE,EAAQE,KAAI,SAACC,GAAD,OACX,6BACE,wBACEL,UAAU,yBACVM,KAAK,SACLC,QAAS,kBAAMJ,EAAgBE,IAHjC,SAKGA,KANIA,UCIFG,G,MARM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,mBAAGT,UAAU,eAAb,SAA6BS,MCavBC,G,MAdC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,0BAASZ,UAAU,UAAnB,UACGW,GAAS,oBAAIX,UAAU,gBAAd,SAA+BW,IACxCC,OC+CQC,G,kNA/CbC,MAAQ,CACNnB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPkB,gBAAkB,SAACC,GACjB,EAAKC,UAAS,SAACC,GAAD,sBACXF,EAAME,EAAUF,GAAO,O,EAI5BG,mBAAqB,kBACnBC,OAAOC,OAAO,EAAKP,OAAOQ,QAAO,SAACxB,EAAOyB,GAAR,OAAiBzB,EAAQyB,M,EAE5DC,gCAAkC,kBAChCC,SAAU,EAAKX,MAAMnB,KAAO,EAAKwB,qBAAwB,M,4CAE3D,WACE,IAAMO,IACFC,KAAKb,MAAMnB,QAAUgC,KAAKb,MAAMlB,WAAa+B,KAAKb,MAAMjB,IAC5D,OACE,sBAAKG,UAAU,UAAf,UACE,cAAC,EAAD,CAASW,MAAM,wBAAf,SACE,cAAC,EAAD,CACET,QAASkB,OAAOQ,KAAKD,KAAKb,OAC1BX,gBAAiBwB,KAAKZ,oBAG1B,cAAC,EAAD,CAASJ,MAAM,eAAf,SACGe,EACC,cAAC,EAAD,CACE/B,KAAMgC,KAAKb,MAAMnB,KACjBC,QAAS+B,KAAKb,MAAMlB,QACpBC,IAAK8B,KAAKb,MAAMjB,IAChBC,MAAO6B,KAAKR,qBACZpB,gBAAiB4B,KAAKH,oCAGxB,cAAC,EAAD,CAAcf,QAAQ,+B,GAxChBoB,IAAMC,YCJxBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,cAAc,Y","file":"static/js/main.d674778e.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport './Statistics.scss'\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercent }) => {\r\n  return (\r\n    <ul className=\"Statistics\">\r\n      <li className=\"Statistics_Item\">\r\n        Good\r\n        <span>{good}</span>\r\n      </li>\r\n\r\n      <li className=\"Statistics_Item\">\r\n        Neutral\r\n        <span>{neutral}</span>\r\n      </li>\r\n      <li className=\"Statistics_Item\">\r\n        Bad\r\n        <span>{bad}</span>\r\n      </li>\r\n      <li className=\"Statistics_Item\">\r\n        Total\r\n        <span>{total}</span>\r\n      </li>\r\n      <li className=\"Statistics_Item\">\r\n        Positive feedback\r\n        <span>{positivePercent}%</span>\r\n      </li>\r\n    </ul>\r\n  )\r\n}\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number,\r\n  positivePercent: PropTypes.number,\r\n}\r\n\r\nexport default Statistics\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport './FeedbackOptions.scss'\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\r\n  return (\r\n    <ul className=\"FeedbackOptions\">\r\n      {options.map((option) => (\r\n        <li key={option}>\r\n          <button\r\n            className=\"FeedbackOptions_Button\"\r\n            type=\"button\"\r\n            onClick={() => onLeaveFeedback(option)}\r\n          >\r\n            {option}\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  )\r\n}\r\n\r\nFeedbackOptions.propTypes = {\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n  options: PropTypes.arrayOf(PropTypes.string),\r\n}\r\n\r\nexport default FeedbackOptions\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport './Notification.scss'\r\n\r\nconst Notification = ({ message }) => {\r\n  return <p className=\"Notification\">{message}</p>\r\n}\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default Notification\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport './Section.scss'\r\n\r\nconst Section = ({ title, children }) => {\r\n  return (\r\n    <section className=\"Section\">\r\n      {title && <h2 className=\"Section_Title\">{title}</h2>}\r\n      {children}\r\n    </section>\r\n  )\r\n}\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n  children: PropTypes.node,\r\n}\r\n\r\nexport default Section\r\n","import React from 'react'\nimport Statistics from './components/Statistics/Statistics'\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions'\nimport Notification from './components/Notification/Notification'\nimport Section from './components/Section/Section'\n\nimport './App.scss'\n\nclass App extends React.Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  }\n\n  handleIncrement = (key) => {\n    this.setState((prevState) => ({\n      [key]: prevState[key] + 1,\n    }))\n  }\n\n  countTotalFeedback = () =>\n    Object.values(this.state).reduce((total, item) => total + item)\n\n  countPositiveFeedbackPercentage = () =>\n    parseInt((this.state.good / this.countTotalFeedback()) * 100)\n\n  render() {\n    const isVisible =\n      !!this.state.good || !!this.state.neutral || !!this.state.bad\n    return (\n      <div className=\"AppRoot\">\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={Object.keys(this.state)}\n            onLeaveFeedback={this.handleIncrement}\n          />\n        </Section>\n        <Section title=\"Upload stats\">\n          {isVisible ? (\n            <Statistics\n              good={this.state.good}\n              neutral={this.state.neutral}\n              bad={this.state.bad}\n              total={this.countTotalFeedback()}\n              positivePercent={this.countPositiveFeedbackPercentage()}\n            />\n          ) : (\n            <Notification message=\"No feedback given\" />\n          )}\n        </Section>\n      </div>\n    )\n  }\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.querySelector('#root')\n)\n\n// import './index.css';\n// import reportWebVitals from './reportWebVitals';\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// // If you want to start measuring performance in your app, pass a function\n// // to log results (for example: reportWebVitals(console.log))\n// // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}